plugins {
	id 'fabric-loom' version '0.10-SNAPSHOT'
	id 'maven-publish'
	id 'com.modrinth.minotaur' version '1.2.+'
}

import com.modrinth.minotaur.TaskModrinthUpload
import com.modrinth.minotaur.request.VersionType

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = "${project.mod_version}+${project.suported_version}"
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	flatDir {
		dirs 'libs'
	}
	maven { url "https://maven.terraformersmc.com/releases" }
	maven { url "https://maven.shedaniel.me/" }
    maven {
        url 'https://repo.maven.apache.org/maven2'
        name 'Maven Central'
    }
	maven {url "https://jitpack.io"}
}

dependencies {
	implementation 'com.google.code.gson:gson:2.9.0'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Cloth config
	modImplementation("me.shedaniel.cloth:cloth-config-fabric:${project.clothconfig_version}") {
		exclude group: "net.fabricmc.fabric-api"
		exclude module: "modmenu"
	}
	include "me.shedaniel.cloth:cloth-config-fabric:${project.clothconfig_version}"

	// Mod Menu
	modImplementation "com.terraformersmc:modmenu:${project.mod_menu_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// https://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit
	include(implementation("org.eclipse.jgit:org.eclipse.jgit:6.0.0.202111291000-r"))

	// https://mvnrepository.com/artifact/org.slf4j/slf4j-api
	include(implementation("org.slf4j:slf4j-api:1.7.28"))


	//DiscordIPC
	modImplementation ("com.github.LogicismDev:DiscordIPC:639d2f5000"){
		exclude module: "slf4j-api"
		include "com.github.LogicismDev:DiscordIPC:639d2f5000"
	}

	include(modImplementation("com.github.Marcono1234:gson-record-type-adapter-factory:0.2.0"))
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// Minecraft 1.18 upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

test {
	useJUnitPlatform()
}

task publishModrinth(type: TaskModrinthUpload) {
	dependsOn(build)
	onlyIf {
		System.getenv('MODRINTH_TOKEN')
	}

	token = System.getenv('MODRINTH_TOKEN')
	projectId = project.modrinth_id
	versionNumber = "v${project.version}"
	versionName = "Skyblocker ${project.mod_version} (${project.suported_version})"
	uploadFile = remapJar
	addGameVersion('1.17.1')
	addGameVersion((String) project.minecraft_version)
	addLoader('fabric')
	versionType = VersionType.RELEASE
	changelog = System.getenv('CHANGELOG')
	doLast {
		println "::set-output name=url::https://modrinth.com/mod/skyblocker-liap/version/$uploadInfo.id"
	}

}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}